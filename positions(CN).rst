:title: 定位向导
:css: tutorial.css

----

位置
====

在每个幻灯片开始处放置 ``data-`` 字段（必须放到每张幻灯片的开头）

“右侧0像素，下方1000像素”的表达方法如下::

    :data-x: 0
    :data-y: 1000

下一张幻灯片就是这样放置的。

----

:data-x: 0
:data-y: 1000

X & Y
=====

不必同时给出 X 坐标和 Y 坐标。 
缺省值是“与上一张幻灯片”相同。 

----

:data-x: 2000
:data-y: 1000

定位字段
========

任何以 ``data-`` 开头的字段都会被转化为 impress.js 中的 ``data-`` 属性。
如果 impress.js 支持新的属生，hovercraft 也会继承。

现在 impress.js 中已有的属性如下::

    data-x          X 轴的位置
    data-y          Y 轴的位置
    data-z          Z 轴的位置 (这意味着可以3D布局!)
    data-rotate     以“度”为单位旋转
    data-rotate-z   与 data-rotate 相同
    data-rotate-x   在 X 轴上旋转
    data-rotate-y   在 Y 轴上旋转
    data-scale      当前幻灯片的比例（这意味着可以缩放）

下面我们就做一下缩放与旋转吧!

----

:data-scale: 5
:data-rotate: 90
:data-x: 3000
:data-y: 1000

放大!
=====

这里我们旋转了 90 度，并放大了 5 倍。

----

:data-scale: 1
:data-x: 4000
:data-y: 2000
:id: positions_last_slide

与上一张幻灯片的相对位置
========================

绝对坐标定位有一个问题：在已经做好的幻灯片中再插入一张新幻灯片，这将不得不
调整其后被影响的所有幻灯片的位置，这是个相当繁锁的事！

不过不用担心，Hovercraft 用相对坐标解决这个问题。

----

:data-x: r1000

就像这样
========

只需在坐标前加 ``r`` 就可以了。如果前一张幻灯片移动，则本张幻灯片随之移动。

----

:data-y: positions_last_slide+1000

与任意幻灯片的相对位置
==========================

您可以通过 id 指定对之前任意一张幻灯片的位置。
这种方法对所有字段都适用。
注意：不能用 ``r`` 作为幻灯片的 id 

----

:data-rotate: r15

自动定位
========

如果不设置字段的值，则默认每个字段都保存上一次的值。
因此, 之前设置 data-x 为 r1000 本次设置 data-rotate 为 r15，
这使得本张（包括之后的所有幻灯片）都右移 1000 像素，并旋转 15 度

看上去像是“向上”移动了，因为我们之前旋转了 90 度。

----

:data-x: r1000
:data-scale: 0.15

**注意!**
==============

----

:data-x: r1000
:data-scale: 1

效果看起来不错?
===============

注意：当有比较大的缩放时，不同的浏览器的表现是有差异的。
有些会变得缓慢和不平稳，3D效果和其他效果会在放大时显示锯齿边缘的字体。
较老的和较不常见的浏览器也可能有3D效果的问题。

----

:hovercraft-path: m275,175 a150,150 0 0,1 -150,150

SVG 路径
========

``:hovercraft-path:`` 告诉 Hovercraft 沿着 SVG 路径放置幻灯片。
这使得您可以按照某种图形的边缘放置幻灯片。

----

SVG 路径
========

您可以使用 Inkscape 之灯的软件设计一个形状。
然后从 SVG 中将路径提取出来 (在 XML 文件里)，再在 Hovercraft 中使用这个路径。

这个例子是个弧形。

----

SVG 路径
========

使用 SVG 路径也不是没有讲究的。
值得惊喜的是：本向导有很多关于 SVG 路径的话题，提醒您要注意的点。

----

SVG 路径
========

每一个幻灯片要沿着路径摆放，并且路径会按幻灯片大小进行缩放.

----

:data-rotate: -180
:data-x: r-1200

SVG 路径
========

当遇到一个明确定位的幻灯片时，沿着路径定位的方式就会结束。
就像这张幻灯片一样。

----

:data-rotate-y: -45
:data-y: r-100
:data-x: r-800

3D!
===

现在变得复杂了！

----

:data-rotate-y: 0
:data-y: r100
:data-x: r-1000

3D 旋转
=======

我们已经知道如何使用 ``:data-rotate:`` 字段了。 
现在也可以按 Y 轴旋转。

----

:data-x: r0
:data-y: r0
:data-rotate-y: 90

3D 旋转
=======

这是原地按 Y 轴旋转 90 度的效果。
下一步我们转回去。

----

:data-x: r0
:data-y: r0
:data-rotate-y: 0

----

:data-x: r-1000
:data-y: r0
:data-rotate-y: 0

3D 旋转
=======

因为文本没有深度，所以转90度后会隐藏。
当然，按 X 转的效果是一样的。

----

:data-x: r0
:data-y: r0
:data-rotate-x: 90

3D 旋转
=======

这是原地按 X 轴旋转 90 度的效果。
下一步我们转回去。

----

:data-x: r0
:data-y: r0
:data-rotate-x: 0

----

:data-x: r-1000

3D 定位
=======

不仅可以 3D 旋转，还可以 3D 摆放幻灯片。
目前为止我们已经使用过 ``:data-x`` 和 ``:data-y`` ，但也有
 ``:data-z``

----

:data-z: 1000
:data-x: r0
:data-y: r-50

Z 空间
======

----

:data-x: r0
:data-y: r-500

Z 空间
======

这可以用于各种有趣的效果。应该指出
在某些浏览器中Z轴的深度是相当有限的。

如果将其设置得太高，则会发现幻灯片显示可能很低并且颠倒。

----

:data-x: r800
:data-y: r0

Z 空间
======

Z 方向排放通常会有“哇噢！”的效果。

----

:data-z: 0
:data-x: r100
:data-y: r-200
:data-scale: 1

使文字弹出!
==================

----

:data-x: r3000
:data-y: r-1500
:data-scale: 15
:data-rotate-z: 0
:data-rotate-x: 0
:data-rotate-y: 0
:data-z: 0


先说这些
==================

*祝大家开心!*

